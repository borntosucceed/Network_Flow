import numpy as np
from scipy.optimize import minimize

def flow_fun(pi, ep):
    s_u = np.sign(2-pi[0])*np.sqrt(np.abs(2-pi[0]))+np.sign(2-pi[0])*np.sqrt(np.abs(2-pi[0]))+np.sign(2-pi[0])*np.sqrt(np.abs(2-pi[0]))
    v_t = np.sign(pi[3]-2)*np.sqrt(np.abs(pi[3]-2))+np.sign(pi[3]-2)*np.sqrt(np.abs(pi[3]-2))+np.sign(pi[3]-2)*np.sqrt(np.abs(pi[3]-2))
    u_v = np.sign(pi[0]-pi[3])*np.sqrt(np.abs(pi[0]-pi[3]))+np.sign(pi[1]-pi[3])*np.sqrt(np.abs(pi[1]-pi[3]))+np.sign(pi[2]-pi[5])*np.sqrt(np.abs(pi[2]-pi[5]))
    
    return np.square(np.sum(s_u)-np.sum(v_t))+np.square(np.sum(u_v)-np.sum(s_u))+np.square(np.sum(v_t)-np.sum(u_v))-ep*np.sum(s_u) 

def der_flow_fun(pi, ep):
    s_u = np.sign(2-pi[0])*np.sqrt(np.abs(2-pi[0]))+np.sign(2-pi[0])*np.sqrt(np.abs(2-pi[0]))+np.sign(2-pi[0])*np.sqrt(np.abs(2-pi[0]))
    v_t = np.sign(pi[3]-2)*np.sqrt(np.abs(pi[3]-2))+np.sign(pi[3]-2)*np.sqrt(np.abs(pi[3]-2))+np.sign(pi[3]-2)*np.sqrt(np.abs(pi[3]-2))
    u_v = np.sign(pi[0]-pi[3])*np.sqrt(np.abs(pi[0]-pi[3]))+np.sign(pi[1]-pi[3])*np.sqrt(np.abs(pi[1]-pi[3]))+np.sign(pi[2]-pi[5])*np.sqrt(np.abs(pi[2]-pi[5]))
    
    der_pi_u1 = -(np.sum(s_u)-np.sum(v_t))/np.sqrt(np.abs(2-pi[0]))+(np.sum(u_v)-np.sum(s_u))/np.sqrt(np.abs(2-pi[0]))+(np.sum(u_v)-np.sum(s_u))/np.sqrt(np.abs(pi[0]-pi[3]))-(np.sum(v_t)-np.sum(u_v))/np.sqrt(np.abs(pi[0]-pi[3]))-ep*0.5/np.sqrt(np.abs(2-pi[0]))
    der_pi_u2 = -(np.sum(s_u)-np.sum(v_t))/np.sqrt(np.abs(2-pi[1]))+(np.sum(u_v)-np.sum(s_u))/np.sqrt(np.abs(2-pi[1]))+(np.sum(u_v)-np.sum(s_u))/np.sqrt(np.abs(pi[1]-pi[4]))-(np.sum(v_t)-np.sum(u_v))/np.sqrt(np.abs(pi[1]-pi[4]))-ep*0.5/np.sqrt(np.abs(2-pi[1]))
    der_pi_u3 = -(np.sum(s_u)-np.sum(v_t))/np.sqrt(np.abs(2-pi[2]))+(np.sum(u_v)-np.sum(s_u))/np.sqrt(np.abs(2-pi[2]))+(np.sum(u_v)-np.sum(s_u))/np.sqrt(np.abs(pi[2]-pi[5]))-(np.sum(v_t)-np.sum(u_v))/np.sqrt(np.abs(pi[2]-pi[5]))-ep*0.5/np.sqrt(np.abs(2-pi[2]))
    der_pi_v1 = -(np.sum(s_u)-np.sum(v_t))/np.sqrt(np.abs(pi[3]-2))-(np.sum(u_v)-np.sum(s_u))/np.sqrt(np.abs(pi[0]-pi[3]))+(np.sum(v_t)-np.sum(u_v))/np.sqrt(np.abs(pi[3]-2))+(np.sum(v_t)-np.sum(u_v))/np.sqrt(np.abs(pi[0]-pi[3]))
    der_pi_v2 = -(np.sum(s_u)-np.sum(v_t))/np.sqrt(np.abs(pi[4]-2))-(np.sum(u_v)-np.sum(s_u))/np.sqrt(np.abs(pi[1]-pi[4]))+(np.sum(v_t)-np.sum(u_v))/np.sqrt(np.abs(pi[4]-2))+(np.sum(v_t)-np.sum(u_v))/np.sqrt(np.abs(pi[1]-pi[4]))
    der_pi_v3 = -(np.sum(s_u)-np.sum(v_t))/np.sqrt(np.abs(pi[5]-2))-(np.sum(u_v)-np.sum(s_u))/np.sqrt(np.abs(pi[2]-pi[5]))+(np.sum(v_t)-np.sum(u_v))/np.sqrt(np.abs(pi[5]-2))+(np.sum(v_t)-np.sum(u_v))/np.sqrt(np.abs(pi[2]-pi[5]))
    
    return np.array([der_pi_u1, der_pi_u2, der_pi_u3, der_pi_v1, der_pi_v2, der_pi_v3])

cons = ({'type':'ineq', 'fun':lambda x: np.array([x[0], x[1], x[2], x[3], x[4], x[5], 4-x[0], 4-x[1], 4-x[2], 4-x[3], 4-x[4], 4-x[5]]),
         'jac': lambda x: np.array([1.0, -1.0])} )

pi0 = [1,1,1,2,1,3]

result = minimize(flow_fun, pi0, args = (0.01), method = 'COBYLA', options = {'disp':True, 'maxiter':1000000000, 'tol':0.0001, 'rhobeg':0.0001, 'catol': 0.0}, constraints = cons)
print(result.message)
print result.fun
print np.sign(2-result.x[0])*np.sqrt(np.abs(2-result.x[0]))+np.sign(2-result.x[0])*np.sqrt(np.abs(2-result.x[0]))+np.sign(2-result.x[0])*np.sqrt(np.abs(2-result.x[0]))
print np.sign(result.x[0]-result.x[3])*np.sqrt(np.abs(result.x[0]-result.x[3]))+np.sign(result.x[1]-result.x[4])*np.sqrt(np.abs(result.x[1]-result.x[4]))+np.sign(result.x[2]-result.x[5])*np.sqrt(np.abs(result.x[2]-result.x[5]))
print np.sign(result.x[3]-2)*np.sqrt(np.abs(result.x[3]-2))+np.sign(result.x[4]-2)*np.sqrt(np.abs(result.x[4]-2))+np.sign(result.x[5]-2)*np.sqrt(np.abs(result.x[5]-2))
